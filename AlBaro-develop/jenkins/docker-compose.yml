version: '3.8'

services:
  frontend:
    build:
      context: ../frontend
    ports:
      - "3000:3000"
    env_file:
      # - /var/jenkins_home/workspace/jenkinsTest/frontend/.env  
      - ../frontend/.env
    networks:
      - app-network

  db:
    image: mysql:8
    environment:
      MYSQL_ROOT_PASSWORD: ssafyalbaro105
      MYSQL_DATABASE: albaro
      MYSQL_USER: albaro
      MYSQL_PASSWORD: ssafyalbaro105
      LANG: ko_KR.UTF-8
      LANGUAGE: ko_KR.UTF-8
      LC_ALL: ko_KR.UTF-8
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - app-network

  backend:
    build:
      context: ../backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/albaro?useSSL=false&useUnicode=true&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=albaro
      - SPRING_DATASOURCE_PASSWORD=ssafyalbaro105
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
    depends_on:
      - db
      - redis
    command: ["./wait-for-it.sh", "db:3306", "--", "java", "-jar", "/app.jar"]
    networks:
      - app-network  
    

  nginx:
    build:
      context: ../nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./nginx/conf.d:/etc/nginx/conf.d
    networks:
      - app-network      
    depends_on:
      - backend
      - frontend

  certbot:
    image: certbot/certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt  # 호스트 머신의 인증서 마운트
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew && nginx -s reload; sleep 12h & wait $${!}; done;'"
    networks:
      - app-network

  face_recognition:
      build:
        context: ../face_recognition 
      ports:
        - "5000:5000"  # 호스트와 컨테이너 간의 포트 매핑
      volumes:
        - /etc/letsencrypt:/etc/letsencrypt:ro
      networks:
      - app-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"  # 호스트와 컨테이너 간의 포트 매핑
    networks:
      - app-network

volumes:
  db_data:

networks:
  app-network:
    driver: bridge