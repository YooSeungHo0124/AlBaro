React를 처음 공부하고 있어서 노션에 정리한 내용을 가지고 왔습니다.

✅React란?
사용자 인터페이스를 만들기 위한 JavaScript 라이브러리 (SPA 라이브러리, Facebook에서 개발)

```jsx
라이브러리 : 개발에 필요한 도구 또는 그 집합
프레임워크 : 개발을 위한 기본 틀, 뼈대
```

### React를 사용하는 이유

- 기존의 웹 서비스에서는 모든 페이지에 대한 네트워크 요청을 함

→ A 사이트를 열었을 때, 페이지 전체의 리소스를 다운로드 하며, B 사이트를 열었을 때, 다시 B사이트와 관련된 전체 리소스를 다시 다운로드 

→ SPA 방식 등장

- **SPA 방식** (Single Page Application)
    - 서버에서 미리 A, B 사이트에 관련된 리소스를 모두 받고, 브라우저(클라이언트)에서 동적으로 화면을 그리는 방식
    - 기존 웹 서비스처럼 새로고침 되는 것이 아니라 JavaScript를 통해 HTML을 생성하는 방식
    - React, Vue, Angular 등

사용자 인터페이스를 만들기 위한 JavaScript 라이브러리 (SPA 라이브러리, Facebook에서 개발)

```jsx
라이브러리 : 개발에 필요한 도구 또는 그 집합
프레임워크 : 개발을 위한 기본 틀, 뼈대
```

### React를 사용하는 이유

- 기존의 웹 서비스에서는 모든 페이지에 대한 네트워크 요청을 함

→ A 사이트를 열었을 때, 페이지 전체의 리소스를 다운로드 하며, B 사이트를 열었을 때, 다시 B사이트와 관련된 전체 리소스를 다시 다운로드 

→ SPA 방식 등장

- **SPA 방식** (Single Page Application)
    - 서버에서 미리 A, B 사이트에 관련된 리소스를 모두 받고, 브라우저(클라이언트)에서 동적으로 화면을 그리는 방식
    - 기존 웹 서비스처럼 새로고침 되는 것이 아니라 JavaScript를 통해 HTML을 생성하는 방식
    - React, Vue, Angular 등


✅React 특징
- **컴포넌트 기반 설계**
    - 의미단위로 컴포넌트 구성
    - 재사용성과 유지보수성 증가
    - 부모, 자식 관계를 가짐
    
    ![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/766b7d87-0bcc-4b52-acf1-22b5126a32cd/a9054244-ef30-47ec-bcaa-dba59031c68b/image.png)
    
- **Virtual DOM (가상돔)**
    - 실제 DOM의 복사본으로 SPA에서의 동적인 변화를 효율적으로 관리하기 위해 사용
    
    → HTML을 동적으로 변경할 때, 브라우저가 DOM을 재구축하고 화면을 그리는 과정을 거치게 되는데 이러한 과정은 잦은 DOM변경에서 성능을 저하시킬 수 있기 때문에, React에서는 변경되어야 할 DOM 요소는 미리 가상 DOM에서 변경해두고, 이것을 DOM에서 동기화 하는 방식을 사용
    

- 단방향 데이터 흐름
- JSX를 통한 선언적 UI 개발

✅React 작동 방식
## 1. Virtual DOM

Virtual DOM은 실제 DOM의 가벼운 복사본으로, React가 성능을 최적화하는 핵심 메커니즘이다.

### Virtual DOM이 필요한 이유

- 실제 DOM 조작은 비용이 많이 드는 작업!
- 브라우저는 DOM이 변경될 때마다 리플로우(레이아웃 계산)와 리페인트 과정을 거침
- Virtual DOM을 사용하면 이러한 비용을 최소화 할 수 있음

### Virtual DOM vs 실제 DOM

- 실제 DOM
    - 웹페이지의 실제 구조를 표현하는 객체 모델
    
- Virtual DOM
    - 메모리에 존재하는 가상의 DOM 트리

## 2. 렌더링 프로세스

- 초기 렌더링
    - JSX가 React.createElement() 호출로 변환
    - React 엘리먼트 트리 생성
    - Virtual DOM 생성
    - 실제 DOM에 최초 렌더링
    
- 업데이트 과정
    - 상태 변경 → 새로운 Virtual DOM 생성 → Diffing → 실제 DOM 업데이트
    
- 재조정
    - 기존 Virtual DOM과 새로운 Virtual DOM을 비교
    - 변경된 부분만 식별하여 실제 DOM에 적용
    - 이 과정을 ‘Diffing 알고리즘’이라고 함

## 3. Diffing 알고리즘

- 루트 엘리먼트 비교
    - 타입이 다르면 이전 트리를 버리고 새로운 트리를 구축
    - 타입이 같으면 속성만 업데이트

- 리스트 비교
    - key prop을 사용하여 변경, 추가, 제거된 아이템을 식별
    
    ```java
    // 예시
    {items.map(item => <li key={item.id}>{item.text}</li>)}
    ```
    

- 컴포넌트 비교
    - 같은 타입의 컴포넌트는 상태를 유지
    - 다른 타입의 컴포넌트는 전체를 교체

## 4. 배치 업데이트

React 18부터 도입!

```java
// 여러 상태 업데이트를 하나의 리렌더링으로 처리
function handleClick() {
  setCount(c => c + 1);    // 리렌더링 발생하지 않음
  setValue("new value");    // 리렌더링 발생하지 않음
  setFlag(true);           // 여기서 한 번만 리렌더링 발생
}
```

## 5. 렌더 단계 & 커밋 단계

- 렌더 단계
    - Virtual DOM 생성 비교
    - 순수하고 비동기적으로 실행 가능
    - 중간에 중단하거나 재시작 가능

- 커밋 단계
    - 실제 DOM 업데이트
    - 동기적으로 실행
    - 중단될 수 없음
    

## 6. 성능 최적화 포인트

- 불필요한 리렌더링 방지

```java
// React.memo를 사용한 컴포넌트 메모이제이션
const MemoizedComponent = React.memo(function MyComponent(props) {
  return <div>{props.value}</div>;
});
```

- 렌더링 최적화

```java
// useMemo를 사용한 계산값 캐싱
const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);
```

✅추가 공부 자료 - DOM
## DOM (Document Object Model) 이란?

- DOM은 브라우저가 전달받은 문서를 해석, 구조화해놓은 결과물입니다.
- 이 DOM을 기준으로 브라우저는 일련의 과정을 거쳐 실제 화면을 보여줍니다.

### 브라우저의 웹 페이지 렌더링 과정

- 초기 요청 단계
    - 사용자가 크롬, 사파리 등의 브라우저로 특정 URL에 접속합니다.
    - 브라우저가 해당 URL의 서버에 페이지를 요청합니다.
    - 서버는 해당 요청에 대한 적절한 응답을 브라우저에게 내려줍니다.
        
        → 보통 응답은 HTML, CSS, JS 등으로 이루어져 있습니다.
        

- 문서 해석 단계
    - 브라우저는 받은 문서를 읽고 해석합니다.
    - 문서의 내용을 사용자가 볼 수 있는 형태로 변환하며
    - 문서를 트리 구조의 DOM으로 변환합니다.
    
    ```java
    html
    ├── head
    │   ├── title
    │   └── meta
    └── body
        ├── header
        ├── main
        └── footer
    ```
    

- 렌더링 단계
    - DOM을 기반으로 실제 화면에 표시할 내용을 구성합니다.
    - CSS 스타일을 적용
    - JavaScript를 실행
    - 최종적으로 사용자에게 완성된 웹 페이지 표시

---

### 왜 DOM은 트리 구조인가?

DOM은 파싱의 결과물이며, DOM 트리는 일반적으로 이름처럼 트리 자료구조로 구현되어있다고 알려져 있습니다. HTML 문서들의 태그들은 부모와 자식 관계처럼 상위 태그가 하위 태그를 감싸는 형태를 반복하고 있는데 이를 계층관계로 보면 자료를 표현하기가 쉽습니다.

```java
<p>At Mozilla, we're a global community of</p>

<ul>
  <li>technologists</li>
  <li>thinkers</li>
  <li>builders</li>
</ul>

<p>working together…</p>

// 출처 https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics
```

웹페이지는 사용자와 상호작용을 계속해서 해야합니다. 사용자가 글을 작성할 수도 있고, 글을 삭제할 수도 있습니다. 혹은 인터랙션이 있는 페이지라면 사용자의 마우스 이벤트에 따라서도 짧은 순간에 구조가 달라질 수도 있습니다.

이 때 어떤 태그의 하위 태그로 새로운 요소가 들어가야하는지, 어떤 요소를 삭제해야하는지가 중요한데 이 연산의 시작은 바로 어떤 노드를 기준으로 연산을 진행할지 찾는 ‘탐색’입니다. 결국 DOM을 나타내기에는 계층 관계를 나타내면서도 탐색 효율이 좋은 자료구조인 트리가 적합합니다.

트리 자료구조는 자료들을 계층적으로 구조화하기에 용이한 비선형 자료구조이며, 주로 저장된 데이터를 효과적으로 탐색하기에 좋습니다.

---

### DOM tree를 구성하는 네 종류의 노드

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/766b7d87-0bcc-4b52-acf1-22b5126a32cd/e5df3728-1e36-4a73-8b80-e337cc01b54e/image.png)

- **문서 노드 (Document Node)**
    - 트리의 최상위에 존재하며 각각 요소, 어트리뷰트, 텍스트 노드에 접근하려면 문서 노드를 통해야 한다. 즉, DOM tree에 접근하기 위한 시작점을 말한다.
    
- **요소 노드 (Element Node)**
    - 요소 노드는 HTML 요소를 표현한다. HTML 요소는 중첩에 의해 부자 관계를 가지며 이 부자 관계를 통해 정보를 구조화한다. 따라서 요소 노드는 문서의 구조를 서술한다고 말 할 수 있다.

- **어트리뷰트 노드 (Attribute Node)**
    - 어트리뷰트 노드는 HTML 요소의 어트리뷰트를 표현한다. 어트리뷰트 노드는 해당 어트리뷰트가 지정된 요소의 자식이 아니라 해당 요소의 일부로 표현된다. 따라서 해당 요소 노드를 찾아 접근하면 어트리뷰트를 참조, 수정할 수 있다.

- **텍스트 노드 (Text Node)**
    - 텍스트 노드는 HTML 요소의 텍스트를 표현한다. 텍스트 노드는 요소 노드의 자식이며 자신의 자식 노드를 가질 수 없다. 즉, 텍스트 노드는 DOM tree의 최종단이다.


✅추가 공부 자료 - Virtual DOM
## Virtual DOM이란?

DOM을 가볍게 만든 JavaScript 표현이라고 할 수 있으며, 주로 React, Vue.js에 사용됩니다. Virtual DOM은 실제로 스크린에 렌더링하는 것이 아니기 때문에 DOM을 직접 업데이트하는 것보다 상대적으로 빠릅니다.

### React의 Virtual DOM 동작 방식

- 작동 순서
    
    ```json
    실제 DOM
        ↑ (최소한의 업데이트)
    Virtual DOM
        ↑ (변경사항 비교)
    React 컴포넌트
    ```
    
    - React 컴포넌트 상태 변경
    - 새로운 Virtual DOM 트리 생성
    - 이전 Virtual DOM과 비교 (Diffing)
    - 실제 변경이 필요한 부분만 실제 DOM에 적용
    

**초기 상태**

```java
// jsx
// 초기 컴포넌트
function UserList() {
  const [users] = useState([
    { id: 1, name: "Alice" },
    { id: 2, name: "Bob" }
  ]);

  return (
    <div className="user-list">
      {users.map(user => (
        <div key={user.id}>{user.name}</div>
      ))}
    </div>
  );
}
```

- **실제 DOM**

```html
<div class="user-list">
  <div>Alice</div>
  <div>Bob</div>
</div>
```

- **Virtual DOM (JSON 형태로 표현)**

```json
{
  "type": "div",
  "props": {
    "className": "user-list",
    "children": [
      {
        "type": "div",
        "props": {
          "key": 1,
          "children": "Alice"
        }
      },
      {
        "type": "div",
        "props": {
          "key": 2,
          "children": "Bob"
        }
      }
    ]
  }
}
```

상태 변경 시

```json
// Bob의 이름을 "Bobby"로 변경
function UserList() {
  const [users] = useState([
    { id: 1, name: "Alice" },
    { id: 2, name: "Bobby" }  // 변경된 부분
  ]);

  return (
    <div className="user-list">
      {users.map(user => (
        <div key={user.id}>{user.name}</div>
      ))}
    </div>
  );
}
```

- 새로운 Virtual DOM

```json
{
  "type": "div",
  "props": {
    "className": "user-list",
    "children": [
      {
        "type": "div",
        "props": {
          "key": 1,
          "children": "Alice"
        }
      },
      {
        "type": "div",
        "props": {
          "key": 2,
          "children": "Bobby"  // 변경된 부분
        }
      }
    ]
  }
}
```

---

### React와 일반 DOM 조작의 차이

- 일반 DOM 조작
    
    ```jsx
    // 직접적인 DOM 조작
    document.getElementById('message').innerHTML = '안녕하세요';
    document.getElementById('message').style.color = 'blue';
    ```
    

- React 방식
    
    ```jsx
    // React 컴포넌트
    function Message() {
      const [text, setText] = useState('안녕하세요');
      return <div style={{ color: 'blue' }}>{text}</div>;
    }
    ```
    

- **React가 제공하는 이점**
    - 선언적 프로그래밍
        - DOM을 직접 조작하지 않고 상태만 관리
        - Reacgt가 자동으로 DOM 업데이트 처리
    
    - 성능 최적화
        - Virtual DOM을 통한 효율적인 업데이트
        - 불필요한 DOM 조작 최소화
        - 배치 처리를 통한 성능 향상


✅ JSX란?
### JSX = HTML + JavaScript

- JavaScript를 확장한 문법
    - 모양은 HTML에 가까움
    - 내부적으로 JavaScript를 사용할 수 있음
    - React는 이 JSX를 이용하여 화면을 그림 (컴포넌트)

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/766b7d87-0bcc-4b52-acf1-22b5126a32cd/8f781335-3508-49e9-9c1a-3a1178e749b2/image.png)

### JSX의 특징

- JSX에서 사용되는 태그의 속성 이름이 HTML과 조금 다름
    - class → className
    - for → htmlFor
    - onclick → onClick
- 태그를 명시적으로 닫아줘야 함
- 하나의 태그로 감싸져 있어야 함

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/766b7d87-0bcc-4b52-acf1-22b5126a32cd/c58fe533-6551-4377-a35f-7a70a299a77b/image.png)

### JSX 구조

```jsx
import ReactDOM from 'react-dom';

let text = 'Hello, world!';
const num = 15;
const obj = { key: 0, a: 1, b: 2 };
const arr = ['a', 'b', 'c'];
const imageUrl =
  'https://dst6jalxvbuf5.cloudfront.net/static/img/logo/logo.svg';

const element = (
  <div>
    <h1>변수 넣기</h1>
    <ul>
      <li>{text}</li>
      <li>{text + 'test'}</li>
    </ul>
    <h1>숫자 및 계산식 넣기</h1>
    <ul>
      <li>{num}</li>
      <li>{num + 15}</li>
    </ul>
    <h1>Boolean, Nullish 값 넣기</h1>
    <ul>
      <li>{true}</li>
      <li>{false}</li>
      <li>{undefined}</li>
      <li>{null}</li>
    </ul>
    <h1>Object, Array 넣기</h1>
    <ul>
      {/* <li>{obj}</li> */}
      <li>{arr}</li>
    </ul>
    <h1>주석 넣기</h1>
    <ul>
      <li>{/* 주석입니다. */}</li>
    </ul>
    <h1>태그 속석에 넣기</h1>
    <ul>
      <li>
        <img src={imageUrl} alt="logo" />
      </li>
    </ul>
  </div>
);

ReactDOM.render(
  element,
  document.getElementById('root')
);

```

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/766b7d87-0bcc-4b52-acf1-22b5126a32cd/68c7be9b-a477-4d13-81d7-09476bff330b/image.png)


✅ JSX 조건문 & 반복문
### 조건문

- 삼항연산자 & AND 연산자 & OR 연산자

```jsx
import ReactDOM from 'react-dom';

const arr = [1, 2, 3];
const text = '';

const element = (
  <div>
    <h1>삼항연산자</h1>
    <ul>
      <li>
        {1 + 1 === 2
          ? '참입니다.'
          : '거짓입니다.'}
      </li>
    </ul>

    <h1>AND 연산자</h1>
    <ul>
      <li>{1 + 1 === 2 && 'AND 연산자1'}</li>
      <li>{arr.length && 'AND 연산자2'}</li>
    </ul>

    <h1>OR 연산자</h1>
    <ul>
      <li>{1 + 1 !== 2 || 'OR 연산자1'}</li>
      <li>{text || 'OR 연산자2'}</li>
    </ul>

ReactDOM.render(
  element,
  document.getElementById('root')
);
```

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/766b7d87-0bcc-4b52-acf1-22b5126a32cd/71302ec0-85ba-41c9-9fa2-8fb0740c9d59/image.png)

- if문을 사용한 조건부 렌더링
    
    ```jsx
    function StatusMessage({ status }) {
      let message;
      
      if (status === 'success') {
        message = <p className="success">성공했습니다!</p>;
      } else if (status === 'error') {
        message = <p className="error">오류가 발생했습니다.</p>;
      } else {
        message = <p>처리 중입니다...</p>;
      }
    
      return <div>{message}</div>;
    }
    ```
    

---

### 반복문

- map() 메서드
    
    ```jsx
    function UserList({ users }) {
      return (
        <ul>
          {users.map(user => (
            <li key={user.id}>
              {user.name} ({user.email})
            </li>
          ))}
        </ul>
      );
    }
    ```
    

- 필터링과 함께 사용 - 조건에 맞는 항목만 렌더링
    
    ```jsx
    function ActiveUserList({ users }) {
      return (
        <ul>
          {users
            .filter(user => user.isActive)
            .map(user => (
              <li key={user.id}>{user.name}</li>
            ))}
        </ul>
      );
    }
    ```
    

- 중첩된 배열 정리 - 복잡한 데이터 구조 처리
    
    ```jsx
    function TeamList({ teams }) {
      return (
        <div>
          {teams.map(team => (
            <div key={team.id}>
              <h2>{team.name}</h2>
              <ul>
                {team.members.map(member => (
                  <li key={member.id}>{member.name}</li>
                ))}
              </ul>
            </div>
          ))}
        </div>
      );
    }
    ```